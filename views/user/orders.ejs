<!-- ------------------------------- styles -------------------------------- -->
<style>
  .order-container {
    flex-grow: 1;
    padding-top: 6.25rem;
    padding-bottom: 2.875rem;
  }

  .stepper-container {
    max-width: 34.375rem;
    margin-inline: auto;
  }

  .stepper {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    position: relative;
  }

  .progress-bar {
    position: absolute;
    top: 1.25rem;
    left: 3.125rem;
    background-color: #e5e7eb;
    height: .25rem;
    width: calc(100% - 6.25rem);
    z-index: 1;
  }

  .progress-bar-fill {
    position: absolute;
    top: 0;
    left: 0;
    background-color: #14a44d;
    height: 100%;
    transition: width 0.5s ease;
    width: 0%;
    /* Start at 0% */
  }

  .step {
    text-align: center;
    position: relative;
    z-index: 2;
    flex: 1;
  }

  .step-circle {
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    background-color: white;
    border: 2px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    transition: all 0.3s ease;
  }

  .step-circle svg {
    width: 1.25rem;
    height: 1.25rem;
    color: #9ca3af;
  }

  .step-title {
    margin-top: .5rem;
    font-size: .875rem;
    color: #6b7280;
    font-weight: 500;
  }

  .step.completed .step-circle {
    background-color: #14a44d;
    border-color: #14a44d;
  }

  .step.completed .step-circle svg {
    color: white;
  }

  .step.completed .step-title {
    color: #14a44d;
  }

  .step.active .step-circle {
    border-color: #14a44d;
  }

  .step.active .step-title {
    color: #14a44d;
  }

  .step.active::after {
    content: '';
    position: absolute;
    top: .125rem;
    right: 43%;
    transform: translateX(16px);
    width: .75rem;
    height: .75rem;
    background-color: #14a44d;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      transform: translateX(1rem) scale(1);
      opacity: 1;
    }

    50% {
      transform: translateX(1rem) scale(1.3);
      opacity: 0.5;
    }

    100% {
      transform: translateX(1rem) scale(1);
      opacity: 1;
    }
  }

  .card-stepper {
    z-index: 0
  }

  #return-alert,
  #rating-alert,
  #review-alert {
    display: none;
    font-size: .75rem;
  }

  .swal-css .swal2-popup {
    color: rgb(255, 255, 255);
    background-color: rgba(51, 45, 45, .75);
    backdrop-filter: blur(8px);
    border-radius: 1.5rem;
  }

  .swal-css .swal2-confirm {
    color: rgb(51, 45, 45);
    background-color: rgb(255, 255, 255);
  }

  .swal-css .swal2-cancel {
    color: rgb(51, 45, 45);
    background-color: rgb(255, 255, 255);
  }

  .swal-css .swal2-input {
    box-shadow: none;
    border-color: rgb(255, 255, 255);
  }

  details {
    display: inline-block;
    position: relative;
    margin: 10px;
  }

  summary {
    list-style: none;
    cursor: pointer;
    color: #2563eb;
  }

  summary::-webkit-details-marker {
    display: none;
  }

  .tooltip-content {
    position: absolute;
    background: #333;
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    width: max-content;
    z-index: 1000;
    font-size: 14px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    /* Right positioning */
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
    margin-left: 8px;
  }

  details[open] .tooltip-content {
    animation: simpleFade 0.15s ease-out;
  }

  @keyframes simpleFade {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  .tooltip-content::before {
    content: '';
    position: absolute;
    right: 100%;
    top: 50%;
    transform: translateY(-50%);
    border: 6px solid transparent;
    border-right-color: #333;
  }
</style>
<!-- ----------------------------------------------------------------------- -->

<!-- --------------------------- navbar included --------------------------- -->
<%- include('navbar') %>
<!-- ----------------------------------------------------------------------- -->

<!-- -------------------------- order container -------------------------- -->
<div class="order-container">
  <!-- ----------------------- order details section ----------------------- -->
  <section>
    <div class="container px-4 px-sm-2 pt-md-3">
      <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="col-md-10 col-lg-8">
          <h5 class="mb-4 h4 text-dark border-bottom border-3 border-dark d-inline-block pb-1">ORDERS - <%= orderCount %> item(s)</h5>
          <% let totalPriceWithoutDiscount = 0 %>
          <% if(orders.length!=0) { %>
          <% orders.forEach((ele,index)=> { %>
          <div class="card card-stepper mb-4" style="border-radius: 16px;" data-orderId="<%= ele._id %>">
            <div class="card-header p-4">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <%function scrambleString(str) { %>
                  <% let shufflePattern = [12, 5, 19, 2, 17, 0, 22, 9, 14, 8, 3, 15, 1, 18, 6, 11, 4, 13, 7, 10, 16, 21, 20, 23]; %>
                  <% let scrambledArray = []; %>

                  <% shufflePattern.forEach((newIndex, i) => { %>
                  <% scrambledArray[i] = str[newIndex]; %>
                  <% }) %>

                  <% scrambledArray.splice(20); %>
                  <% return scrambledArray.join(''); %>
                  <% } %>

                  <% let orderID = scrambleString(ele.id); %>
                  <p class="text-muted mb-2"> Order ID: <span class="fw-bold text-body"><%= orderID %></span></p>
                  <p class="text-muted mb-0"><%= ele.products[0].status === 'Pending' ? 'Pending' : 'Place' %> On <span class="fw-bold text-body"><%= new Date(ele.createdAt).toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' }) %></span> </p>
                </div>
              </div>
            </div>
            <div class="card-body p-4 pb-0">
              <% ele.products.forEach((product,index,array)=> { %>
              <% totalPriceWithoutDiscount += product.price * product.quantity %>
              <div class="d-flex flex-row mb-3 mb-lg-3 pb-2">
                <div class="flex-fill product-detail">
                  <a href="/product-details?productId=<%= product.productID._id %>&productCategory=<%= product.productID.productCategory.categoryName %>" class="text-dark d-inline-block">
                    <p class="h5"><%= product.productName %></p>
                  </a>
                  <p class="text-muted"> Qt: <%= product.quantity %></p>
                  <% if ((ele.paymentMethod === 'Cash on delivery' && (product.status === 'Delivered' || product.status === 'Returned' || product.status === 'Pending-Return')) || (ele.paymentMethod === 'Razorpay' && product.status !== 'Pending') || (ele.paymentMethod === 'Wallet')) { %>
                  <div>
                    <button class="mt-2 btn btn-sm shadow-0 btn-dark invoice-btn" data-order-id="<%= ele._id %>" data-index="<%= index %>"><i class="fa-duotone fa-solid fa-download fa-xl me-2" style="--fa-primary-color: #a0aabb; --fa-secondary-color: #ffffff; --fa-secondary-opacity: 1;"></i>invoice</button>
                  </div>
                  <% } %>
                  <% if (product.status === 'Pending') { %>
                  <button class="mt-2 mb-2 btn btn-secondary btn-sm shadow-0 text-black cancel-modal-btn disabled opacity-100" data-mdb-modal-init data-mdb-target="#cancel-modal" type="button"><i class="fa-solid fa-clock fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>pending</button>
                  <% } else if (product.status === 'Pending-Return') { %>
                  <button class="mt-2 mb-2 btn btn-secondary btn-sm shadow-0 text-black cancel-modal-btn disabled opacity-100" data-mdb-modal-init data-mdb-target="#cancel-modal" type="button"><i class="fa-solid fa-clock fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>pending-return</button>
                  <div>
                    <details class="m-0">
                      <summary class="text-decoration-underline text-dark">
                        Return Request Initiated <i class="ms-2 fa-duotone fa-solid fa-circle-info fa-lg" style="--fa-primary-color: #000000; --fa-secondary-color: #ffd500; --fa-secondary-opacity: 1;"></i>
                      </summary>
                      <div class="tooltip-content">
                        REASON: <%= product.reasonForReturn %>
                      </div>
                    </details>
                  </div>
                  <% } else if (product.status === 'Returned') { %>
                  <button class="mt-2 mb-2 btn btn-warning btn-sm shadow-0 text-black cancel-modal-btn disabled opacity-100" data-mdb-modal-init data-mdb-target="#cancel-modal" type="button">item returned</button>
                  <div>
                    <small class="text-warning">REASON: <%= product.reasonForReturn %></small>
                  </div>
                  <% } else if (product.status === 'Cancelled') { %>
                  <button class="mt-2 mb-2 btn btn-danger btn-sm shadow-0 text-black cancel-modal-btn disabled opacity-100" data-mdb-modal-init data-mdb-target="#cancel-modal" type="button">item cancelled</button>
                  <div>
                    <small class="text-danger">REASON: <%= product.reasonForCancel %></small>
                  </div>
                  <% } else if (product.status !== 'Delivered') { %>
                  <button class="mt-2 btn btn-danger btn-sm shadow-0 text-black cancel-modal-btn" data-mdb-modal-init data-mdb-target="#cancel-modal" data-order-id="<%= ele._id %>" data-index="<%= index %>" type="button"><i class="fa-duotone fa-solid fa-ban fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>cancel item</button>
                  <% } else { %>
                  <button class="mt-2 btn btn-warning btn-sm shadow-0 text-black return-modal-btn" data-mdb-modal-init data-mdb-target="#return-modal" type="button" data-delivery-date="<%= product.deliveryDate %>" data-order-id="<%= ele._id %>" data-index="<%= index %>"><i class="fa-duotone fa-solid fa-rotate-left fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>return item</button>
                  <small class="d-block date-wrapper">Available till <span class="date" data-delivery-date="<%= product.deliveryDate %>"></span></small>
                  <% } %>
                  <% if (product.reasonForRejection) { %>
                  <details class="m-0 mt-2">
                    <summary class="text-decoration-underline text-dark">
                      Return Request Rejected <i class="ms-2 fa-duotone fa-solid fa-circle-info fa-lg" style="--fa-primary-color: #000000; --fa-secondary-color: #ffd500; --fa-secondary-opacity: 1;"></i>
                    </summary>
                    <div class="tooltip-content">
                      REASON: <%= product.reasonForRejection %>
                    </div>
                  </details>
                  <% } %>
                </div>
                <!-- Image -->
                <div class="col-2">
                  <div class="bg-image hover-overlay hover-zoom ripple rounded" data-mdb-ripple-color="light">
                    <a href="/product-details?productId=<%= product.productID._id %>&productCategory=<%= product.productID.productCategory.categoryName %>">
                      <img src="<%= product.productImage %>" class="w-100" alt="" width="120" />
                    </a>
                  </div>
                </div>
                <!-- Image -->
              </div>
              <% 
              let orderTotalPrice = 0;
              let refundableAmount = 0;
              let productShare = 0; // returning product share for calculating coupon discount
              let couponDiscount = 0; // share of coupon discount for the returning item, if any

              // calculate the total order price
              ele.products.forEach((ele) => {
                orderTotalPrice += ele.productID.productDiscountedPrice * ele.quantity;
              });

              // calculate the product share of the returning product
              productShare =
                (product.productID.productDiscountedPrice *
                  product.quantity) /
                orderTotalPrice;

              // initial refundable amount for the returning product
              refundableAmount =
                product.productID.productDiscountedPrice *
                product.quantity;

              // adjust for coupon discount if applicable
              if (ele.couponDiscount > 0) {
                orderTotalPrice -= ele.couponDiscount;
                
                couponDiscount = ele.couponDiscount * productShare;
                refundableAmount -= Math.round(couponDiscount);
              }

              // add delivery charge if total price is less than 500 after coupon discount
              if (orderTotalPrice < 500) {
                refundableAmount += 40 * product.quantity;
              }
              %>
              <% if (product.status === 'Returned' || (product.status === 'Cancelled' && (ele.paymentMethod === 'Razorpay' || ele.paymentMethod === 'Wallet'))) { %>
              <div class="text-center">
                <p class="mb-4 text-success">Refund of ₹ <%= refundableAmount %> is credited to your wallet!</p>
              </div>
              <% } %>
              <% if (product.status === 'Returned') { %>
              <div class="text-center">
                <button class="mt-2 mb-3 btn btn-warning btn-sm shadow-0 text-black review-modal-btn" data-mdb-modal-init data-mdb-target="#review-modal" data-product-id="<%= product.productID._id %>" type="button"><i class="fa-duotone fa-solid fa-star fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>write a review</button>
              </div>
              <p class="text-muted text-center"> Returned on <span class="text-body"><%= new Date(product.returnedDate).toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' }) %></span> </p>
              <% } else if (product.status === 'Delivered') { %>
              <div class="text-center">
                <button class="mt-2 mb-3 btn btn-warning btn-sm shadow-0 text-black review-modal-btn" data-mdb-modal-init data-mdb-target="#review-modal" data-product-id="<%= product.productID._id %>" type="button"><i class="fa-duotone fa-solid fa-star fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>write a review</button>
              </div>
              <p class="text-muted text-center"> Delivered on <span class="text-body"><%= new Date(product.deliveryDate).toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' }) %></span> </p>
              <% } else if (product.status === 'Pending-Return') { %>
              <div class="text-center">
                <button class="mt-2 mb-3 btn btn-warning btn-sm shadow-0 text-black review-modal-btn" data-mdb-modal-init data-mdb-target="#review-modal" data-product-id="<%= product.productID._id %>" type="button"><i class="fa-duotone fa-solid fa-star fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>write a review</button>
              </div>
              <p class="text-muted text-center">Tracking Status on: <span class="text-body"><%= new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }) %>, Today</span></p>
              <% } else if (product.status !== 'Cancelled' && product.status !== 'Pending') { %>
              <p class="text-muted text-center">Tracking Status on: <span class="text-body"><%= new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }) %>, Today</span></p>
              <% } %>
              <% if (product.status !== 'Cancelled' && product.status !== 'Pending') { %>
              <div class="stepper-container mb-4" data-order-status="<%= product.status %>">
                <div class="stepper">
                  <div class="progress-bar">
                    <div class="progress-bar-fill"></div>
                  </div>
                  <div class="step" data-status="pending">
                    <div class="step-circle">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div class="step-title">Pending</div>
                  </div>
                  <div class="step" data-status="confirmed">
                    <div class="step-circle">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                      </svg>
                    </div>
                    <div class="step-title">Confirmed</div>
                  </div>
                  <div class="step" data-status="shipped">
                    <div class="step-circle">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                    </div>
                    <div class="step-title">Shipped</div>
                  </div>
                  <div class="step" data-status="delivered">
                    <div class="step-circle">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                      </svg>
                    </div>
                    <div class="step-title"><%= product.status === 'Pending-Return' || product.status === 'Returned' ? 'Returned' : 'Delivered' %></div>
                  </div>
                </div>
              </div>
              <% } %>
              <% if (index !== array.length - 1) { %>
              <div class="mb-4 p-0 card-header"></div>
              <% } %>
              <% }) %>
            </div>
            <% if (ele.products[0].status === 'Pending') { %>
            <div class="card-footer">
              <div class="text-center mb-1">
                <button class="mt-2 btn btn-success text-black retry-payment-btn" data-order-id="<%= ele._id %>" type="button"><i class="fa-duotone fa-solid fa-money-bills-simple fa-xl me-2" style="--fa-primary-color: #000000; --fa-secondary-color: #000000; --fa-secondary-opacity: 1;"></i>retry payment</button>
                <div class="row align-items-center justify-content-center mt-2 text-black">
                  <div class="col-5">
                    <hr class="m-0">
                  </div>
                  <div class="col-auto">
                    <p class="m-0">OR</p>
                  </div>
                  <div class="col-5">
                    <hr class="m-0">
                  </div>
                </div>
                <small class="text-danger">This order will be removed in <span id="timer"></span></small>
              </div>
            </div>
            <% } %>
            <div class="card-footer">
              <% if (ele.products[0].status === 'Pending') { %>
              <h4 class="mb-3 mt-2"><span class="small text-muted">Order Total :</span> ₹ <%= ele.totalPrice.toLocaleString() %></h4>
              <% } else { %>
              <h4 class="mb-3 mt-2"> ₹ <%= ele.totalPrice.toLocaleString() %> <span class="small text-muted"> via <%= ele.paymentMethod %> </span></h4>
              <% } %>
              <h4 class="h5"><span class="small text-muted">Total Savings :</span> ₹ <%= ele.totalPrice < totalPriceWithoutDiscount ? (totalPriceWithoutDiscount - ele.totalPrice).toLocaleString() : '0' %></h4>
            </div>
            <div class="card-footer p-4">
              <h1 class="h5 mb-3">Shipping Address</h1>
              <p class="m-0"><%= ele.address.contactName + ', ' + ele.address.house + ', ' + ele.address.area + ', ' + ele.address.city + ', ' + ele.address.state + ', ' + 'Pin: ' + ele.address.pincode + ', ' + 'Phone: ' + ele.address.phone %></p>
            </div>
          </div>
          <% totalPriceWithoutDiscount = 0 %>
          <% }) %>
          <% } else { %>
          <p class="h4">You have no orders yet...</p>
          <% } %>
        </div>
      </div>
    </div>
  </section>
  <!-- ----------------------------------------------------------------------- -->

  <!-- -------------------- modal for order return --------------------- -->
  <div class="modal fade" id="return-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Return Order</h5>
          <button type="button" class="btn-close" data-mdb-ripple-init data-mdb-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <select id="return-reason" data-mdb-select-init class="form-control select">
            <option value="" selected disabled>Choose Return Reason</option>
            <option>Damaged or defective product</option>
            <option>Incorrect item received</option>
            <option>Poor quality</option>
            <option>Product not as described</option>
            <option>Change of mind</option>
          </select>
          <small id="return-alert" class="text-danger"></small>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary ms-auto shadow-0" data-mdb-ripple-init data-mdb-dismiss="modal">Close</button>
          <button type="button" id="apply-return" class="btn btn-success me-auto shadow-0" data-mdb-ripple-init>Apply</button>
        </div>
      </div>
    </div>
  </div>
  <!-- ----------------------------------------------------------------------- -->

  <!-- -------------------- modal for order cancellation --------------------- -->
  <div class="modal fade" id="cancel-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Cancel Order</h5>
          <button type="button" class="btn-close" data-mdb-ripple-init data-mdb-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <select id="cancel-reason" data-mdb-select-init class="form-control select">
            <option value="" selected disabled>Choose Cancel Reason</option>
            <option>Incorrect item ordered</option>
            <option>Change of mind</option>
            <option>Delayed delivery</option>
            <option>Found a better price elsewhere</option>
            <option>Payment issues</option>
          </select>
          <small id="cancel-alert" class="text-danger"></small>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary ms-auto shadow-0" data-mdb-ripple-init data-mdb-dismiss="modal">Close</button>
          <button type="button" id="apply-cancel" class="btn btn-success me-auto shadow-0" data-mdb-ripple-init>Apply</button>
        </div>
      </div>
    </div>
  </div>
  <!-- ----------------------------------------------------------------------- -->

  <!-- -------------------- modal for adding product review --------------------- -->
  <div class="modal fade" id="review-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Rating and Review</h5>
          <button type="button" class="btn-close" data-mdb-ripple-init data-mdb-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p class="text-center mb-1">Rating</p>
          <ul class="rating d-flex justify-content-center" data-mdb-toggle="rating">
            <li value="0">
              <i class="far fa-star fa-sm text-warning" title="Bad"></i>
            </li>
            <li>
              <i class="far fa-star fa-sm text-warning" title="Poor"></i>
            </li>
            <li>
              <i class="far fa-star fa-sm text-warning" title="OK"></i>
            </li>
            <li>
              <i class="far fa-star fa-sm text-warning" title="Good"></i>
            </li>
            <li>
              <i class="far fa-star fa-sm text-warning" title="Excellent"></i>
            </li>
          </ul>
          <small id="rating-alert" class="text-danger"></small>
          <hr>
          <p class="mb-2">Review</p>
          <div class="form-outline" data-mdb-input-init>
            <textarea class="form-control" id="review" rows="4"></textarea>
            <label class="form-label" for="review">What do you feel?</label>
          </div>
          <small id="review-alert" class="text-danger mb-2"></small>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary ms-auto shadow-0" data-mdb-ripple-init data-mdb-dismiss="modal">Close</button>
          <button type="button" id="post-review" class="btn btn-success me-auto shadow-0" data-mdb-ripple-init>post</button>
        </div>
      </div>
    </div>
  </div>
  <!-- ----------------------------------------------------------------------- -->

  <!-- --------------------------- pagination included --------------------------- -->
  <%- include('pagination') %>
  <!-- ----------------------------------------------------------------------- -->

  <!-- --------------------------- testimonials included --------------------------- -->
  <%- include('testimonial') %>
  <!-- ----------------------------------------------------------------------- -->
</div>
<!-- ----------------------------------------------------------------------- -->

<!-- --------------------------- footer included --------------------------- -->
<%- include('footer') %>
<!-- ----------------------------------------------------------------------- -->

<!-- ----------------------------- javaScript ------------------------------ -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // modals initialization
    const returnModal = document.getElementById('return-modal');
    const cancelModal = document.getElementById('cancel-modal');
    const reviewModal = document.getElementById('review-modal');
    let returnModalInstance = mdb.Modal.getInstance(returnModal);
    let cancelModalInstance = mdb.Modal.getInstance(cancelModal);
    let reviewModalInstance = mdb.Modal.getInstance(reviewModal);
    let productIndex;
    let orderID;
    let productID;

    // if no instance exists, create a new one
    if (!returnModalInstance) {
      returnModalInstance = new mdb.Modal(returnModal);
    }

    if (!cancelModalInstance) {
      cancelModalInstance = new mdb.Modal(cancelModal);
    }

    if (!reviewModalInstance) {
      reviewModalInstance = new mdb.Modal(reviewModal);
    }

    // open modal on button click
    document.querySelectorAll('.return-modal-btn').forEach(ele => {
      ele.addEventListener('click', function() {
        productIndex = ele.getAttribute('data-index');
        orderID = ele.getAttribute('data-order-id');

        returnModalInstance.show();
      });
    });

    document.querySelectorAll('.cancel-modal-btn').forEach(ele => {
      ele.addEventListener('click', function() {
        productIndex = ele.getAttribute('data-index');
        orderID = ele.getAttribute('data-order-id');

        cancelModalInstance.show();
      });
    });

    document.querySelectorAll('.review-modal-btn').forEach(ele => {
      ele.addEventListener('click', function() {
        productID = ele.getAttribute('data-product-id');

        reviewModalInstance.show();
      });
    });

    // for changing order status
    const stepperContainer = document.querySelectorAll('.stepper-container');
    const statuses = ['Pending', 'Confirmed', 'Shipped', 'Delivered'];

    stepperContainer.forEach(ele => {
      const steps = Array.from(ele.querySelectorAll('.step'));
      const progressBar = ele.querySelectorAll('.progress-bar-fill');
      let status = ele.getAttribute('data-order-status');

      if (status === 'Pending-Return') status = 'Pending';
      if (status === 'Returned') status = 'Delivered';

      progressBar.forEach(ele => {
        // function to calculate progress width
        function calculateProgressWidth(currentIndex) {
          if (currentIndex === 0) return 0;
          return ((currentIndex) / (steps.length - 1)) * 100;
        }

        // function to update stepper status
        function updateStepperStatus(newStatus) {
          const currentIndex = statuses.indexOf(newStatus);
          if (currentIndex === -1) return;

          // update progress bar with calculated width
          const progressWidth = calculateProgressWidth(currentIndex);
          ele.style.width = `${progressWidth}%`;

          // update steps
          steps.forEach((step, index) => {
            step.classList.remove('active', 'completed');
            if (index <= currentIndex) {
              step.classList.add('completed');
            }
            if (index === currentIndex) {
              step.classList.add('active');
            }
          });
        }

        // initialize stepper with current status
        updateStepperStatus(status);
      })
    })

    // assigning the return expiry date to DOM element
    document.querySelectorAll('.product-detail').forEach(ele => {
      const dateWrapper = ele.querySelector('.date-wrapper')
      const dateElement = ele.querySelector('.date');
      const returnBtn = ele.querySelector('.return-modal-btn');

      if (dateElement) {
        const deliveryDate = dateElement.getAttribute('data-delivery-date');
        const date = new Date(deliveryDate);

        // add 7 days to the delivery date
        date.setDate(date.getDate() + 7);

        dateElement.innerHTML = getDateAfterSevenDays(deliveryDate);

        if (new Date() > date) {
          returnBtn.classList.add('disabled');
          dateWrapper.classList.add('opacity-50')
        }

        // returns the date 7 days from today in 'dd-m-yyyy' format
        function getDateAfterSevenDays(deliveryDate) {
          // get the day, month, and year from the new date
          let day = date.getDate();
          let month = date.getMonth() + 1; // months are zero-indexed, so add 1
          const year = date.getFullYear();

          // format day and month to have two digits
          day = day < 10 ? `0${day}` : day;
          month = month < 10 ? `0${month}` : month;

          // format the date as dd-mm-yyyy
          const formattedDate = `${day}-${month}-${year}`;

          return formattedDate;
        }
      }
    })

    // will initialize order return request and order cancel using fetch
    document.querySelector('body').addEventListener('click', function(event) {
      const target = event.target;
      const returnReason = document.querySelector('#return-reason').value;
      const returnAlert = document.querySelector('#return-alert');
      const cancelReason = document.querySelector('#cancel-reason').value;
      const cancelAlert = document.querySelector('#cancel-alert');

      if (target.id === 'apply-return' && returnReason) {
        fetch(`/return-order?orderID=${orderID}&productIndex=${productIndex}&returnReason=${returnReason}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          }).then(response => response.json())
          .then(data => {
            if (data.error) {
              Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Try again',
                icon: 'error',
                confirmButtonText: 'OK',
                allowOutsideClick: false,
                customClass: {
                  container: 'swal-css'
                }
              });
            }

            if (data.success) {
              window.location.reload();
            }
          }).catch(err => {
            console.log(err);
          })
      } else if (target.id === 'apply-return' && !returnReason) {
        returnAlert.style.display = 'inline';
        returnAlert.innerHTML = 'Please select an option';
      }

      if (target.id === 'apply-cancel' && cancelReason) {
        fetch(`/cancel-order?orderID=${orderID}&productIndex=${productIndex}&cancelReason=${cancelReason}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          }).then(response => response.json())
          .then(data => {
            if (data.error) {
              Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Try again',
                icon: 'error',
                confirmButtonText: 'OK',
                allowOutsideClick: false,
                customClass: {
                  container: 'swal-css'
                }
              });
            }

            if (data.success) {
              window.location.reload();
            }
          }).catch(err => {
            console.log(err);
          })
      } else if (target.id === 'apply-cancel' && !cancelReason) {
        cancelAlert.style.display = 'inline';
        cancelAlert.innerHTML = 'Please select an option';
      }
    })

    // will assign rating value
    let rating;
    const ratingElement = document.querySelector('.rating');

    ratingElement.addEventListener('onSelect.mdb.rating', function(event) {
      rating = event.value;
    });

    // will add product review using fetch
    document.querySelector('#post-review').addEventListener('click', function() {
      const review = document.querySelector('#review').value;
      const ratingAlert = document.querySelector('#rating-alert');
      const reviewAlert = document.querySelector('#review-alert');

      ratingAlert.style.display = 'none';
      reviewAlert.style.display = 'none';

      if (rating && review.length > 7 && review.length < 221) {
        fetch(`/add-review?productID=${productID}&rating=${rating}&review=${review}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          }).then(response => response.json())
          .then(data => {
            if (data.error) {
              Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Try again',
                icon: 'error',
                confirmButtonText: 'OK',
                allowOutsideClick: false,
                customClass: {
                  container: 'swal-css'
                }
              });
            }

            if (data.success) {
              window.location.reload();
            }
          }).catch(err => {
            console.log(err);
          })
      } else {
        if (!rating) {
          ratingAlert.style.display = 'inline';
          ratingAlert.innerHTML = 'Rating is required';
        }

        if (!review) {
          reviewAlert.style.display = 'inline';
          reviewAlert.innerHTML = 'Review is required';
        } else if (review.length < 8) {
          reviewAlert.style.display = 'inline';
          reviewAlert.innerHTML = 'Review min length is 8';
        } else if (review.length > 220) {
          reviewAlert.style.display = 'inline';
          reviewAlert.innerHTML = 'Review max length is 220';
        }
      }
    });

    // for retrying payment on pending orders through razorpay gateway
    const retryPaymentElements = document.querySelectorAll('.retry-payment-btn');
    let intervalId;

    retryPaymentElements.forEach(ele => {
      ele.addEventListener('click', function() {
        const orderID = ele.getAttribute('data-order-id');
        const url = `/retry-payment-renderer?orderID=${orderID}`;

        fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
          }).then(response => response.json())
          .then(data => {
            if (data.timeLimitExceeded || data.productQuantityMismatch) {
              Swal.fire({
                icon: "warning",
                title: "Order can't be placed",
                text: data.timeLimitExceeded ? 'Retry payment time limit exceeded.' : 'One or more products is not available.',
                confirmButtonText: "Remove Order",
                allowOutsideClick: false,
                customClass: {
                  container: 'swal-css'
                }
              }).then((result) => {
                if (result.isConfirmed) {
                  const url = `/remove-pending-order?orderID=${orderID}`;

                  fetch(url, {
                      method: "DELETE",
                      headers: {
                        'Content-Type': 'application/json'
                      },
                    }).then(response => response.json())
                    .then((data) => {
                      if (data.success) {
                        window.location.reload();
                      }
                    }).catch((err) => {
                      console.error('Error while deleting pending order', err);
                    })
                }
              })
            }

            if (data.order) {
              // update order interval will be cleared
              clearInterval(intervalId);

              const options = {
                "key": "rzp_test_3MjpZb7TBnz8Ul",
                "amount": data.order.amount,
                "currency": "INR",
                "name": "PUZZLE BOX",
                "order_id": data.order.id,
                "handler": function(response) {
                  const url = `/place-pending-order?orderID=${orderID}`;

                  fetch(url, {
                      method: "POST",
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature
                      })
                    }).then(response => response.json())
                    .then((data) => {
                      if (data.success) {
                        window.location.href = '/order-confirmation';
                      }
                    }).catch((err) => {
                      console.error('Error on razor pay payment callback', err);
                    })
                },
                "modal": {
                  ondismiss: function() {
                    updateOrderInterval();
                  }
                },
                "prefill": {
                  "name": this.getAttribute('data-username'),
                  "email": this.getAttribute('data-email'),
                  "contact": this.getAttribute('data-phone')
                },
                "notes": {
                  "address": "Razorpay Corporate Office"
                },
                "theme": {
                  "color": "#3399cc"
                }
              };

              const rzp1 = new Razorpay(options);

              rzp1.on('payment.failed', function(response) {
                window.location.reload();
              });

              rzp1.open();
            }
          }).catch(err => {
            Swal.fire({
              title: 'Error!',
              text: 'Error while loading payment method',
              icon: 'error',
              confirmButtonText: 'OK',
              allowOutsideClick: false,
              customClass: {
                container: 'swal-css'
              }
            })
          })
      })
    })

    // remove pending orders using fetch after a predefined time
    const orders = JSON.parse('<%- JSON.stringify(orders) %>');

    orders.forEach(ele => {
      if (ele.products[0].status === 'Pending') {
        const orderElement = document.querySelector(`[data-orderId="${ele._id}"]`);
        const timerElement = orderElement.querySelector('#timer');
        const timeDifference = new Date() - new Date(ele.createdAt);
        const timeLimit = 300000; // in milliseconds
        const minutes = String(Math.floor(timeLimit / (1000 * 60))).padStart(2, '0');
        const seconds = String(Math.floor(timeLimit % (1000 * 60)) / 1000).padStart(2, '0');

        timerElement.innerHTML = `${minutes}:${seconds}`;

        function updateOrder() {
          const timeDifference = new Date() - new Date(ele.createdAt);
          const diff = timeLimit - timeDifference;

          const minutes = Math.floor(diff / (1000 * 60));
          const seconds = Math.floor((diff % (1000 * 60)) / 1000);

          const formattedMinutes = String(minutes).padStart(2, '0');
          const formattedSeconds = String(seconds).padStart(2, '0');

          timerElement.innerHTML = `${formattedMinutes}:${formattedSeconds}`;

          if (diff <= 0) {
            const url = `/remove-pending-order?orderID=${ele._id}`;

            fetch(url, {
                method: "DELETE",
                headers: {
                  'Content-Type': 'application/json'
                },
              }).then(response => response.json())
              .then((data) => {
                if (data.success) {
                  window.location.reload();
                }
              }).catch((err) => {
                console.error('Error while deleting pending order', err);
              })
          }
        }

        window.updateOrderInterval = function() {
          intervalId = setInterval(updateOrder, 1000);
        }

        updateOrderInterval();
      }
    })

    // for downloading invoice 
    const invoiceBtn = document.querySelectorAll('.invoice-btn');

    invoiceBtn.forEach(ele => {
      ele.addEventListener('click', function() {
        function scrambleString(str) {
          const shufflePattern = [
            12, 5, 19, 2, 17, 0, 22, 9, 14, 8, 3, 15, 1, 18, 6, 11, 4, 13, 7, 10,
            16, 21, 20, 23,
          ];
          const scrambledArray = shufflePattern.map((i) => str[i]).slice(0, 20);
          return scrambledArray.join("");
        }

        const orderID = ele.getAttribute('data-order-id');
        const index = ele.getAttribute('data-index');

        fetch('/generate-invoice', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderID,
              index
            })
          })
          .then(response => {
            if (!response.ok) throw new Error('Failed to generate report');
            return response.blob();
          })
          .then(pdfBlob => {
            const downloadUrl = window.URL.createObjectURL(pdfBlob);
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.setAttribute('download', `Invoice (#${scrambleString(orderID)}).pdf`);
            document.body.appendChild(link);
            link.click();
            link.parentNode.removeChild(link);
            window.URL.revokeObjectURL(downloadUrl);
          })
          .catch(error => {
            console.error('Error downloading report:', error);
          })
          .finally(() => {});
      })
    })
  });
</script>
<!-- ----------------------------------------------------------------------- -->