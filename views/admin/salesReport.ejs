<!-- styles -->
<style>
  .datatable thead {
    color: rgb(255, 255, 255);
    background-color: #332d2d;
  }

  .status {
    display: block !important;
    width: 3.75rem;
  }

  .swal-css .swal2-popup {
    color: rgb(255, 255, 255);
    background-color: rgba(51, 45, 45, .75);
    backdrop-filter: blur(8px);
    border-radius: 1.5rem;
  }

  .swal-css .swal2-confirm {
    color: rgb(51, 45, 45);
    background-color: rgb(255, 255, 255);
  }

  .swal-css .swal2-cancel {
    color: rgb(51, 45, 45);
    background-color: rgb(255, 255, 255);
  }

  .swal-css .swal2-input {
    box-shadow: none;
    border-color: rgb(255, 255, 255);
  }

  .swal2-success-circular-line-left,
  .swal2-success-fix,
  .swal2-success-circular-line-right {
    background-color: transparent !important
  }

  input:-webkit-autofill,
  input:-webkit-autofill:hover,
  input:-webkit-autofill:focus,
  input:-webkit-autofill:active {
    caret-color: rgb(255, 255, 255);
    -webkit-text-fill-color: #ffffff !important;
    transition: background-color 5000s ease-in-out 0s;
    box-shadow: inset 0 0 20px 20px transparent !important;
  }

  input[name="startDateInput"],
  input[name="endDateInput"] {
    pointer-events: none;
    border: 2px solid #000;
    height: 35px;
  }

  .select-input.form-control[readonly]:not([disabled]) {
    height: 35px;
  }

  .datepicker-toggle-button {
    right: 8%;
    top: 50%;
    transform: translate(0%, 0%);
  }

  small {
    display: none;
    font-size: .75rem;
  }

  #salesReport {
    background-color: rgba(51, 45, 45, .05);
  }
</style>

<!-- navbar included -->
<%- include('navbar') %>

<!-- sidenav included -->
<%- include('sidenav') %>

<!-- title -->
<h2 id="h2" class="ms-4 ms-md-0 pe-5 text-sm-end me-sm-5">SALES REPORT</h2>

<hr class="mb-4">

<div id="content">
  <div class="container-fluid">
    <div class="row px-4">
      <div class="col-12">
        <div class="row gy-4">
          <div class="col-12 col-lg-6 col-xl-4">
            <div class="card">
              <div class="card-body">
                <div class="row align-items-center">
                  <div class="col-3">
                    <i class="fa-duotone fa-solid fa-boxes-stacked fa-2xl display-3"></i>
                  </div>
                  <div class="col-9 text-end">
                    <div class="row mb-2">
                      <div class="col-12">
                        <h1 class="m-0 fst-italic"><%= overallStats.overall.totalSalesCount.toLocaleString() %></h1>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <h5 class="card-title fst-italic m-0">Overall Sales Count</h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-lg-6 col-xl-4">
            <div class="card">
              <div class="card-body">
                <div class="row align-items-center">
                  <div class="col-3">
                    <i class="fa-duotone fa-solid fa-percent fa-2xl display-3"></i>
                  </div>
                  <div class="col-9 text-end">
                    <div class="row mb-2">
                      <div class="col-12">
                        <h1 class="m-0 fst-italic">₹ <%= overallStats.overall.totalDiscount.toLocaleString() %></h1>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <h5 class="card-title fst-italic m-0">Overall Sales Discount</h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-lg-6 col-xl-4">
            <div class="card">
              <div class="card-body">
                <div class="row align-items-center">
                  <div class="col-3">
                    <i class="fa-duotone fa-solid fa-indian-rupee-sign fa-2xl display-3"></i>
                  </div>
                  <div class="col-9 text-end">
                    <div class="row mb-2">
                      <div class="col-12">
                        <h1 class="m-0 fst-italic">₹ <%= overallStats.overall.totalSalesAmount.toLocaleString() %></h1>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <h5 class="card-title fst-italic m-0">Overall Sales Amount</h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-lg-6 col-xl-4">
            <div class="card">
              <div class="card-body">
                <div class="row align-items-center">
                  <div class="col-3">
                    <i class="fa-duotone fa-solid fa-calendar-day fa-2xl display-3"></i>
                  </div>
                  <div class="col-9 text-end">
                    <div class="row mb-2">
                      <div class="col-12">
                        <h1 class="m-0 fst-italic">₹ <%= overallStats.daily.metrics.totalSalesAmount.toLocaleString() %></h1>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <h5 class="card-title fst-italic m-0">Sales: <%= new Date().toDateString().split(" ").slice(1, 3).join(" ") %></h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-lg-6 col-xl-4">
            <div class="card">
              <div class="card-body">
                <div class="row align-items-center">
                  <div class="col-3">
                    <i class="fa-duotone fa-solid fa-calendar-week fa-2xl display-3"></i>
                  </div>
                  <div class="col-9 text-end">
                    <div class="row mb-2">
                      <div class="col-12">
                        <h1 class="m-0 fst-italic">₹ <%= overallStats.weekly.metrics.totalSalesAmount.toLocaleString() %></h1>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <%                        
                        function getLastWeekRange () {
                        const today = new Date();
                        const startDate = new Date(today.setDate(today.getDate() - 7)).toDateString().split(" ").slice(1, 3).join(" ");
                        const endDate = new Date().toDateString().split(" ").slice(1, 3).join(" ");

                        return `${startDate} - ${endDate}`;
                        }
                        %>
                        <h5 class="card-title fst-italic m-0">Sales: <%= getLastWeekRange() %></h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-lg-6 col-xl-4">
            <div class="card">
              <div class="card-body">
                <div class="row align-items-center">
                  <div class="col-3">
                    <i class="fa-duotone fa-solid fa-calendar-days fa-2xl display-3"></i>
                  </div>
                  <div class="col-9 text-end">
                    <div class="row mb-2">
                      <div class="col-12">
                        <h1 class="m-0 fst-italic">₹ <%= overallStats.yearly.metrics.totalSalesAmount.toLocaleString() %></h1>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <%                        
                        function getLastMonthRange () {
                        const today = new Date();
                        const startDate = new Date(today.setDate(today.getDate() - 30)).toDateString().split(" ").slice(1, 3).join(" ");
                        const endDate = new Date().toDateString().split(" ").slice(1, 3).join(" ");

                        return `${startDate} - ${endDate}`;
                        }
                        %>
                        <h5 class="card-title fst-italic m-0">Sales: <%= getLastMonthRange() %></h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <hr class="my-4">
      <div class="col-12 mb-4">
        <div class="row justify-content-center">
          <%
          function convertDateFormat(dateString) {
          const date = new Date(dateString);
          const day = String(date.getDate()).padStart(2, '0');
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const year = date.getFullYear();

          return `${day}/${month}/${year}`;
          }
          %>
          <div class="col-12 col-lg-3 col-xl-2">
            <div class="position-relative datepicker" id="start-date-picker">
              <label class="form-label text-dark m-0" for="form12">Start Date</span></label>
              <input type="text" id="form1" class="form-control mb-2" name="startDateInput" value="<%= convertDateFormat(customStats.customRange.dateRange.start) %>" />
              <small class="start-date-alert position-absolute top-100 text-danger"></small>
            </div>
          </div>
          <div class="col-12 col-lg-3 col-xl-2 mt-2 mb-2 mt-lg-0 mb-lg-0">
            <div class="position-relative datepicker" id="end-date-picker">
              <label class="form-label text-dark m-0" for="form12">End Date</span></label>
              <input type="text" id="form1" class="form-control mb-2" name="endDateInput" value="<%= convertDateFormat(customStats.customRange.dateRange.end) %>" />
              <small class="end-date-alert position-absolute top-100 text-danger"></small>
            </div>
          </div>
          <div class="col-12 col-lg-3 col-xl-2">
            <label for="" class="text-dark m-0">Sales Duration</label>
            <select data-mdb-select-init class="form-control select" name="salesDuration">
              <option value="" disabled selected hidden>Select</option>
              <option value="0">Daily</option>
              <option value="1">Weekly</option>
              <option value="2">Monthly</option>
              <option value="3">Yearly</option>
            </select>
          </div>
        </div>
        <div class="row justify-content-center mt-3">
          <div class="col-12 col-lg-4 col-xl-3 mb-3 mb-lg-0">
            <button class="btn btn-dark generate-report btn-block"><i class="fa-duotone fa-solid fa-rotate fa-xl me-2" style="--fa-primary-color: #a0aabb; --fa-secondary-color: #ffffff; --fa-secondary-opacity: 1;"></i>generate report</button>
          </div>
          <div class="col-12 col-lg-4 col-xl-2 mb-3 mb-lg-0">
            <button class="btn btn-dark excel-report btn-block" onclick="downloadExcelSalesReport()"><i class="fa-duotone fa-solid fa-download fa-xl me-2" style="--fa-primary-color: #a0aabb; --fa-secondary-color: #ffffff; --fa-secondary-opacity: 1;"></i>excel report</button>
          </div>
          <div class="col-12 col-lg-3 col-xl-2">
            <button class="btn btn-dark pdf-report btn-block" onclick="downloadPDFSalesReport()"><i class="fa-duotone fa-solid fa-download fa-xl me-2" style="--fa-primary-color: #a0aabb; --fa-secondary-color: #ffffff; --fa-secondary-opacity: 1;"></i>pdf report</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- sales report table container -->
  <div data-mdb-datatable-init="" class="datatable datatable-bordered datatable-hover" data-mdb-datatable-initialized="true" data-mdb-entries="4" data-mdb-full-pagination="true">
    <div class="datatable-inner table-responsive ps ps--active-x" style="overflow: auto; position: relative;">
      <table class="table datatable-table" id="exampleTable">
        <thead class="datatable-header">
          <tr>
            <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_0" class="datatable-sort-icon fas fa-arrow-up"></i> Order ID</th>
            <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_1" class="datatable-sort-icon fas fa-arrow-up"></i> Ordered Date</th>
            <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_2" class="datatable-sort-icon fas fa-arrow-up"></i> Payment Method</th>
            <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_3" class="datatable-sort-icon fas fa-arrow-up"></i> Discount</th>
            <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_4" class="datatable-sort-icon fas fa-arrow-up"></i> Coupon Discount</th>
            <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_4" class="datatable-sort-icon fas fa-arrow-up"></i> Order Total</th>
          </tr>
        </thead>
        <tbody class="datatable-body">
          <% customStats.customRange.orders.forEach(order=> { %>
          <%function scrambleString(str) { %>
          <% let shufflePattern = [12, 5, 19, 2, 17, 0, 22, 9, 14, 8, 3, 15, 1, 18, 6, 11, 4, 13, 7, 10, 16, 21, 20, 23]; %>
          <% let scrambledArray = []; %>

          <% shufflePattern.forEach((newIndex, i) => { %>
          <% scrambledArray[i] = str[newIndex]; %>
          <% }) %>

          <% scrambledArray.splice(20); %>
          <% return scrambledArray.join(''); %>
          <% } %>

          <% let orderID = scrambleString(order.orderId.toString()); %>
          <tr>
            <td class="" data-mdb-field="field_0" false="">
              <p class="fw-normal mb-1 name">
                <%= orderID %>
              </p>
            </td>
            <td class="" data-mdb-field="field_1" false="">
              <p class="fw-normal mb-1">
                <%= new Date(order.createdAt).toDateString() %>
              </p>
              <p class="fw-normal mb-0">
                <%= new Date(order.createdAt).toTimeString().slice(0, 8) %>
              </p>
            </td>
            <td class="" data-mdb-field="field_0" false="">
              <p class="fw-normal mb-1 name">
                <%= order.paymentMethod %>
              </p>
            </td>
            <td class="" data-mdb-field="field_0" false="">
              <p class="fw-normal mb-1 name">
                ₹ <%= order.totalDiscount.toLocaleString() %>
              </p>
            </td>
            <td class="" data-mdb-field="field_0" false="">
              <p class="fw-normal mb-1 name">
                ₹ <%= order.totalCouponDiscount.toLocaleString() %>
              </p>
            </td>
            <td class="" data-mdb-field="field_0" false="">
              <p class="fw-normal mb-1 name">
                ₹ <%= order.totalSalesAmount.toLocaleString() %>
              </p>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- footer included -->
<%- include('footer') %>

<!-- javaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // after redirection, remove the query parameter from the URL
    // window.history.replaceState(null, null, window.location.pathname);

    // dynamically adds padding to h2 tag
    const navHeight2 = document.getElementsByTagName('nav')[0].offsetHeight;
    document.getElementById('h2').style.paddingTop = `${navHeight2 + 20}px`;

    // dynamically adds padding to table container
    const footerHeight2 = document.getElementsByTagName('footer')[0].offsetHeight;
    document.getElementsByClassName('datatable')[0].style.paddingBottom = `${footerHeight2 + 1}px`;

    // will get the custom sales duration
    const startDatePicker = document.querySelector('#start-date-picker');
    const endDatePicker = document.querySelector('#end-date-picker');
    const startDateInput = document.querySelector('input[name="startDateInput"]');
    const endDateInput = document.querySelector('input[name="endDateInput"]');
    const startDateAlert = document.querySelector('.start-date-alert');
    const endDateAlert = document.querySelector('.end-date-alert');

    function convertDateFormat(dateStr) {
      const [day, month, year] = dateStr.split('/');

      return `${year}-${month}-${day}`;
    }

    let startDate = convertDateFormat(startDateInput.value);
    let endDate = convertDateFormat(endDateInput.value);

    startDatePicker.addEventListener('dateChange.mdb.datepicker', function() {
      startDate = convertDateFormat(startDateInput.value);
    })

    endDatePicker.addEventListener('dateChange.mdb.datepicker', function() {
      endDate = convertDateFormat(endDateInput.value);
    })

    document.addEventListener('open.mdb.datepicker', function() {
      document.querySelector('#h2').style.display = 'none';
      document.querySelector('#content').style.display = 'none';
    })

    document.addEventListener('close.mdb.datepicker', function() {
      setTimeout(function() {
        document.querySelector('#h2').style.display = 'block';
        document.querySelector('#content').style.display = 'block';
      }, 250)
    })

    // will get the selected sales duration
    const salesDurationSelect = document.querySelector('select[name="salesDuration"]');

    salesDurationSelect.addEventListener('change', function() {
      function convertDateFormat(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();

        return `${day}/${month}/${year}`;
      }

      const dateRange = salesDurationSelect.value;
      const currentDate = new Date().toISOString().split("T")[0];

      if (parseInt(dateRange) === 0) {
        startDate = new Date(currentDate);
        startDate = new Date(currentDate);
      }

      if (parseInt(dateRange) === 1) {
        startDate = new Date(currentDate);
        startDate.setDate(startDate.getDate() - 7);
      }

      if (parseInt(dateRange) === 2) {
        startDate = new Date(currentDate);
        startDate.setDate(startDate.getDate() - 30);
      }

      if (parseInt(dateRange) === 3) {
        startDate = new Date(currentDate);
        startDate.setDate(startDate.getDate() - 365);
      }

      endDate = new Date(currentDate);

      startDateInput.value = convertDateFormat(startDate.toString());
      endDateInput.value = convertDateFormat(endDate.toString());
    })

    // will generate updated sales report based on the selected dates on button click
    document.querySelector('.generate-report').addEventListener('click', function() {
      const currentDate = new Date().toISOString().split("T")[0];
      let isValid = true;

      startDateAlert.style.display = 'none';
      endDateAlert.style.display = 'none';

      if (startDate > currentDate) {
        startDateAlert.style.display = 'inline';
        startDateAlert.innerHTML = 'Invalid start date';
        isValid = false;
      }

      if (endDate > currentDate) {
        endDateAlert.style.display = 'inline';
        endDateAlert.innerHTML = 'Invalid end date';
        isValid = false;
      }

      if (startDate > endDate) {
        startDateAlert.style.display = 'inline';
        startDateAlert.innerHTML = 'Invalid start date';
        isValid = false;
      }

      if (isValid) {
        window.location.href = `/admin/sales-report?startDate=${startDate}&endDate=${endDate}`
      }
    })

    // for downloading excel sales report on button click
    window.downloadExcelSalesReport = async function() {
      try {
        function convertDateFormat(dateString) {
          const date = new Date(dateString);
          const day = String(date.getDate()).padStart(2, '0');
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const year = date.getFullYear();

          return `${day}/${month}/${year}`;
        }

        const salesDuration = ['Daily', 'Weekly', 'Monthly', 'Yearly'];

        const response = await fetch('/admin/generate-excel-sales-report', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            startDate,
            endDate
          }),
        });

        if (!response.ok) {
          Swal.fire({
            icon: 'info',
            title: 'Unable to download',
            text: 'No sales for the current duration.',
            confirmButtonText: 'OK',
            allowOutsideClick: false,
            customClass: {
              container: 'swal-css'
            }
          })

          throw new Error('Failed to fetch the sales report');
        }

        // Get the response as a Blob
        const blob = await response.blob();

        // Create a link element to trigger the download
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = `Puzzle Box Sales Report (${convertDateFormat(startDate)} to ${convertDateFormat(endDate)}).xlsx`;
        document.body.appendChild(link);
        link.click();

        // Cleanup
        document.body.removeChild(link);
      } catch (error) {
        console.error('Error downloading the sales report:', error);
      }
    };

    // for downloading PDF sales report on button click
    window.downloadPDFSalesReport = function() {
      function convertDateFormat(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();

        return `${day}/${month}/${year}`;
      }

      fetch('/admin/generate-pdf-sales-report', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            startDate,
            endDate
          })
        })
        .then(response => {
          if (!response.ok) throw new Error('Failed to generate report');
          return response.blob();
        })
        .then(pdfBlob => {
          const downloadUrl = window.URL.createObjectURL(pdfBlob);
          const link = document.createElement('a');
          link.href = downloadUrl;
          link.setAttribute('download', `Puzzle Box Sales Report (${convertDateFormat(startDate)} to ${convertDateFormat(endDate)}).pdf`);
          document.body.appendChild(link);
          link.click();
          link.parentNode.removeChild(link);
          window.URL.revokeObjectURL(downloadUrl);
        })
        .catch(error => {
          Swal.fire({
            icon: 'info',
            title: 'Unable to download',
            text: 'No sales for the current duration.',
            confirmButtonText: 'OK',
            allowOutsideClick: false,
            customClass: {
              container: 'swal-css'
            }
          })

          console.error('Error downloading report:', error);
        })
        .finally(() => {
          button.disabled = false;
          button.textContent = 'Download Sales Report';
        });
    }
  })
</script>