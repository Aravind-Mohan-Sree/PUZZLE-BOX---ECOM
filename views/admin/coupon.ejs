<!-- styles -->
<style>
  .datatable thead {
    color: rgb(255, 255, 255);
    background-color: #332d2d;
  }

  .status {
    display: block !important;
    width: 3.75rem;
  }

  .swal-css .swal2-popup {
    color: rgb(255, 255, 255);
    background-color: rgba(51, 45, 45, .75);
    backdrop-filter: blur(8px);
    border-radius: 1.5rem;
  }

  .swal-css .swal2-confirm {
    color: rgb(51, 45, 45);
    background-color: rgb(255, 255, 255);
  }

  .swal-css .swal2-cancel {
    color: rgb(51, 45, 45);
    background-color: rgb(255, 255, 255);
  }

  .swal-css .swal2-input {
    box-shadow: none;
    border-color: rgb(255, 255, 255);
  }

  input:-webkit-autofill,
  input:-webkit-autofill:hover,
  input:-webkit-autofill:focus,
  input:-webkit-autofill:active {
    caret-color: rgb(0, 0, 0);
    -webkit-text-fill-color: #424242 !important;
    transition: background-color 5000s ease-in-out 0s;
    box-shadow: inset 0 0 20px 20px transparent !important;
  }

  #coupons {
    background-color: rgba(51, 45, 45, .05);
  }

  input[name="expiryDate"] {
    pointer-events: none;
  }

  .datepicker-toggle-button {
    right: 3%;
    top: 55%;
    transform: translate(0%, 0%);
  }

  small {
    display: none;
    font-size: .75rem;
  }
</style>

<!-- navbar included -->
<%- include('navbar') %>

<!-- sidenav included -->
<%- include('sidenav') %>

<!-- title -->
<h2 id="h2" class="ms-4 ms-md-0 pe-5 text-sm-end me-sm-5">COUPONS</h2>

<hr>

<!-- add coupon button -->
<div class="text-center mb-3" id="add-coupon">
  <button class="btn btn-dark" id="add-coupon-btn"><i class="fa-duotone fa-solid fa-ticket fa-xl pe-3" style="--fa-primary-color: #a0aabb; --fa-secondary-color: #ffffff; --fa-secondary-opacity: 1;"></i>add coupon</button>
</div>

<!-- coupon table container -->
<div data-mdb-datatable-init="" class="datatable datatable-bordered datatable-hover" data-mdb-datatable-initialized="true" data-mdb-entries="4" data-mdb-full-pagination="true" id="content">
  <div class="datatable-inner table-responsive ps ps--active-x" style="overflow: auto; position: relative;">
    <table class="table datatable-table" id="exampleTable">
      <thead class="datatable-header">
        <tr>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_0" class="datatable-sort-icon fas fa-arrow-up"></i> Coupon Name</th>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_1" class="datatable-sort-icon fas fa-arrow-up"></i> Coupon Code</th>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_2" class="datatable-sort-icon fas fa-arrow-up"></i> Discount Amount</th>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_3" class="datatable-sort-icon fas fa-arrow-up"></i> Minimum Purchase</th>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_4" class="datatable-sort-icon fas fa-arrow-up"></i> Added Date</th>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_4" class="datatable-sort-icon fas fa-arrow-up"></i> Expiry Date</th>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_4" class="datatable-sort-icon fas fa-arrow-up"></i> Status</th>
          <th style="cursor: pointer;" scope="col"><i data-mdb-sort="field_4" class="datatable-sort-icon fas fa-arrow-up"></i> Actions</th>
        </tr>
      </thead>
      <tbody class="datatable-body">
        <% coupons.forEach(coupon=> { %>
        <tr>
          <td class="" data-mdb-field="field_0" false="">
            <p class="fw-bold mb-1 name" id="coupon-name">
              <%= coupon.couponName %>
            </p>
          </td>
          <td class="" data-mdb-field="field_0" false="">
            <p class="fw-bold mb-1 name">
              <%= coupon.couponCode %>
            </p>
          </td>
          <td class="" data-mdb-field="field_0" false="">
            <p class="fw-bold mb-1 name" id="discount">
              ₹ <%= coupon.discount.toLocaleString() %>
            </p>
          </td>
          <td class="" data-mdb-field="field_0" false="">
            <p class="fw-bold mb-1 name" id="min-amount">
              ₹ <%= coupon.minAmount.toLocaleString() %>
            </p>
          </td>
          <td class="" data-mdb-field="field_1" false="">
            <p class="fw-normal mb-1">
              <%= new Date(coupon.createdAt).toDateString() %>
            </p>
            <p class="fw-normal mb-0">
              <%= new Date(coupon.createdAt).toTimeString().slice(0, 8) %>
            </p>
          </td>
          <td class="" data-mdb-field="field_2" false="">
            <p class="fw-normal mb-1" id="expiry-date">
              <%= new Date(coupon.expiryDate).toDateString() %>
            </p>
            <p class="fw-normal mb-0">
              <%= new Date(coupon.expiryDate).toTimeString().slice(0, 8) %>
            </p>
          </td>
          <td class="" data-mdb-field="field_3" false="">
            <span class="badge status <%= coupon.isActive ? 'badge-success' : 'badge-danger' %> rounded-pill d-inline">
              <%= coupon.isActive ? 'Active' : 'Inactive' %>
            </span>
          </td>
          <td class="" data-mdb-field="field_4" false="">
            <!-- active/inactive button -->
            <button type="button" class="btn btn-link btn-rounded btn-sm fw-bold status-button" data-mdb-ripple-color="dark" data-coupon-id="<%= coupon._id %>">
              <i class="fa-duotone fa-solid <%= coupon.isActive ? 'fa-circle-check' : 'fa-circle-xmark' %> fa-xl status-icon" style="--fa-primary-color: #4f4f4f; --fa-secondary-color: #a6a6a6; --fa-secondary-opacity: 1;"></i>
            </button>

            <!-- edit button -->
            <button type="button" class="btn btn-link btn-rounded btn-sm fw-bold edit-button" data-mdb-ripple-color="dark" data-coupon-id="<%= coupon._id %>">
              <i class="fa-duotone fa-solid fa-pen-to-square fa-xl" style="--fa-primary-color: #4f4f4f; --fa-secondary-color: #a6a6a6; --fa-secondary-opacity: 1;"></i>
            </button>

            <!-- delete button -->
            <button type="button" class="btn btn-link btn-rounded btn-sm fw-bold delete-button" data-mdb-ripple-color="dark" data-coupon-id="<%= coupon._id %>">
              <i class="fa-duotone fa-solid fa-trash fa-xl" style="--fa-primary-color: #4f4f4f; --fa-secondary-color: #a6a6a6; --fa-secondary-opacity: 1;"></i>
            </button>
          </td>
        </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
</div>

<!-- -------------------------- modal for adding and editing coupon --------------------------- -->
<div class="modal p-0" id="coupon-modal" data-mdb-backdrop="static" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add Coupon</h5>
      </div>
      <div class="modal-body">
        <div class="position-relative">
          <label class="form-label" for="form12">Coupon Name <span class="text-danger">*</span></label>
          <input type="text" id="form1" class="form-control mb-3" name="couponName" placeholder="type..." />
          <small class="coupon-name-alert position-absolute top-100 text-danger"></small>
        </div>

        <div class="position-relative">
          <label class="form-label" for="form12">Discount Amount <span class="text-danger">*</span></label>
          <input type="text" id="form1" class="form-control mb-3" name="discountAmount" placeholder="type..." />
          <small class="discount-amount-alert position-absolute top-100 text-danger"></small>
        </div>

        <div class="position-relative">
          <label class="form-label" for="form12">Minimum Purchase <span class="text-danger">*</span></label>
          <input type="text" id="form1" class="form-control mb-3" name="minimumAmount" placeholder="type..." />
          <small class="minimum-amount-alert position-absolute top-100 text-danger"></small>
        </div>

        <div class="position-relative datepicker">
          <label class="form-label" for="form12">Expiry Date <span class="text-danger">*</span></label>
          <input type="text" id="form1" class="form-control mb-2" name="expiryDate" placeholder="dd-mm-yyyy" />
          <small class="expiry-date-alert position-absolute top-100 text-danger"></small>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" id="close-modal-btn" class="btn btn-secondary ms-auto shadow-0" data-mdb-ripple-init data-mdb-dismiss="modal">Close</button>
        <button type="button" id="upsert-coupon-btn" class="btn btn-success me-auto shadow-0" data-mdb-ripple-init>Save</button>
      </div>
    </div>
  </div>
</div>
<!-- ----------------------------------------------------------------------- -->

<!-- footer included -->
<%- include('footer') %>

<!-- javaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // after redirection, remove the query parameter from the URL
    window.history.replaceState(null, null, window.location.pathname);

    // dynamically adds padding to h2 tag
    const navHeight2 = document.getElementsByTagName('nav')[0].offsetHeight;
    document.getElementById('h2').style.paddingTop = `${navHeight2 + 20}px`;

    // dynamically adds padding to table container
    const footerHeight2 = document.getElementsByTagName('footer')[0].offsetHeight;
    document.getElementsByClassName('datatable')[0].style.paddingBottom = `${footerHeight2 + 1}px`;

    // coupon modal initialization
    const modalElement = document.getElementById('coupon-modal');
    let modalInstance = mdb.Modal.getInstance(modalElement);

    // datepicker initialization
    const today = new Date();
    const datepicker = document.querySelector('.datepicker')
    let datepickerInstance = mdb.Datepicker.getInstance(datepicker);

    // if no instance exists, create a new one
    if (!modalInstance) {
      modalInstance = new mdb.Modal(modalElement);
    }

    // if no instance exists, create a new one
    if (!datepickerInstance) {
      datepickerInstance = new mdb.Datepicker(datepicker);
    }

    modalElement.addEventListener('hide.mdb.modal', function() {
      document.querySelector('#content').style.display = 'block';
      document.querySelector('#add-coupon').style.display = 'block';
    })

    modalElement.addEventListener('show.mdb.modal', function() {
      document.querySelector('#content').style.display = 'none';
      document.querySelector('#add-coupon').style.display = 'none';
    })

    // boolean to know whether its a add or edit coupon modal while submitting coupon
    let isAddCoupon = true;

    // clear all inputs inside modal when closed
    document.querySelector('#close-modal-btn').addEventListener('click', function() {
      modalElement.querySelector('.modal-title').innerHTML = 'Add Coupon';

      modalElement.querySelector('input[name="couponName"]').removeAttribute('disabled');
      modalElement.querySelectorAll('input').forEach(ele => {
        ele.value = '';
      })

      modalElement.querySelectorAll('small').forEach(ele => {
        ele.style.display = 'none';
        ele.value = '';
      })

      modalElement.querySelector('#upsert-coupon-btn').classList.remove('btn-info');
      modalElement.querySelector('#upsert-coupon-btn').innerHTML = 'save';

      isAddCoupon = true;
    })

    // opens modal when add coupon button clicked
    document.querySelector('#add-coupon-btn').addEventListener('click', function() {
      modalInstance.show();
    });

    let couponId;

    // when edit button is clicked, modal will be inserted with values from closest table row element
    document.querySelector('body').addEventListener('click', function(event) {
      const editButton = event.target.closest('.edit-button');

      if (editButton) {
        function convertDateFormat(dateString) {
          const date = new Date(dateString);
          const day = String(date.getDate()).padStart(2, '0');
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const year = date.getFullYear();

          return `${day}/${month}/${year}`;
        }

        couponId = editButton.getAttribute('data-coupon-id');
        const expiryDate = editButton.closest('tr').querySelector('#expiry-date').innerText;

        modalElement.querySelector('.modal-title').innerHTML = 'Edit Coupon';
        modalElement.querySelector('input[name="couponName"]').setAttribute('disabled', '');
        modalElement.querySelector('input[name="couponName"]').value = editButton.closest('tr').querySelector('#coupon-name').innerText;
        modalElement.querySelector('input[name="discountAmount"]').value = editButton.closest('tr').querySelector('#discount').innerText.slice(2).replace(/[^0-9.-]/g, '');
        modalElement.querySelector('input[name="minimumAmount"]').value = editButton.closest('tr').querySelector('#min-amount').innerText.slice(2).replace(/[^0-9.-]/g, '');
        modalElement.querySelector('input[name="expiryDate"]').value = convertDateFormat(expiryDate);
        modalElement.querySelector('#upsert-coupon-btn').classList.add('btn-info');
        modalElement.querySelector('#upsert-coupon-btn').innerHTML = 'update';

        modalInstance.show();

        isAddCoupon = false;
      }
    })

    datepicker.addEventListener('open.mdb.datepicker', function(e) {
      modalInstance.hide();

      document.querySelector('#content').style.display = 'none';
      document.querySelector('#add-coupon').style.display = 'none';
    })

    datepicker.addEventListener('close.mdb.datepicker', function(e) {
      modalInstance.show();
    })

    // saves or updates the coupon using fetch after successful validation
    document.querySelector('#upsert-coupon-btn').addEventListener('click', function() {
      const couponName = document.querySelector('input[name="couponName"]').value;
      const discountAmount = document.querySelector('input[name="discountAmount"]').value;
      const minimumAmount = document.querySelector('input[name="minimumAmount"]').value;
      const expiryDate = document.querySelector('input[name="expiryDate"]').value;
      const couponNameAlert = document.querySelector('.coupon-name-alert')
      const discountAmountAlert = document.querySelector('.discount-amount-alert')
      const minimumAmountAlert = document.querySelector('.minimum-amount-alert')
      const expiryDateAlert = document.querySelector('.expiry-date-alert')

      couponNameAlert.style.display = 'none';
      discountAmountAlert.style.display = 'none';
      minimumAmountAlert.style.display = 'none';
      expiryDateAlert.style.display = 'none';

      // will parse the date from input
      function parseDate(dateString) {
        const [day, month, year] = dateString.split('/').map(Number);

        return new Date(Date.UTC(year, month - 1, day));
      }

      // for checking whether the date is in the past or not
      function isPastDate(dateString) {
        const date = parseDate(dateString);
        const today = new Date();

        today.setHours(0, 0, 0, 0);

        return date < today;
      }

      let isValidForm = true;

      if (couponName === '' || /^\s|\s{2,}|\s$/.test(couponName) || couponName.replace(/\s+/g, '').length < 8) {
        if (couponName === '') {
          couponNameAlert.style.display = 'inline';
          couponNameAlert.innerText = 'Coupon name is required';
        } else if (/^\s|\s{2,}|\s$/.test(couponName)) {
          couponNameAlert.style.display = 'inline';
          couponNameAlert.innerText = `Coupon name can't contain unwanted spaces`;
        } else {
          couponNameAlert.style.display = 'inline';
          couponNameAlert.innerText = `Coupon name minimum length is 8`;
        }

        isValidForm = false;
      }

      if (discountAmount === '' || /[a-zA-Z]/.test(discountAmount) || /[^\w\s.]|(\..*\.)|(\.$)/.test(discountAmount) || /\s/.test(discountAmount)) {
        if (discountAmount === '') {
          discountAmountAlert.style.display = 'inline';
          discountAmountAlert.innerText = `Discount amount is required`;
        } else if (/[a-zA-Z]/.test(discountAmount) || /[^\w\s.]|(\..*\.)|(\.$)/.test(discountAmount)) {
          discountAmountAlert.style.display = 'inline';
          discountAmountAlert.innerText = `Invalid amount`;
        } else {
          discountAmountAlert.style.display = 'inline';
          discountAmountAlert.innerText = `Amount can't contain spaces`;
        }

        isValidForm = false;
      }

      if (minimumAmount === '' || /[a-zA-Z]/.test(minimumAmount) || /[^\w\s.]|(\..*\.)|(\.$)/.test(minimumAmount) || /\s/.test(minimumAmount)) {
        if (minimumAmount === '') {
          minimumAmountAlert.style.display = 'inline';
          minimumAmountAlert.innerText = `Minimum purchase is required`;
        } else if (/[a-zA-Z]/.test(minimumAmount) || /[^\w\s.]|(\..*\.)|(\.$)/.test(minimumAmount)) {
          minimumAmountAlert.style.display = 'inline';
          minimumAmountAlert.innerText = `Invalid amount`;
        } else {
          minimumAmountAlert.style.display = 'inline';
          minimumAmountAlert.innerText = `Amount can't contain spaces`;
        }

        isValidForm = false;
      }

      if (+discountAmount >= +minimumAmount && discountAmount !== '' && minimumAmount !== '') {
        discountAmountAlert.style.display = 'inline';
        discountAmountAlert.innerText = `Amount must be less than minimum purchase`;

        minimumAmountAlert.style.display = 'inline';
        minimumAmountAlert.innerText = `Amount must be greater than discount amount`;

        isValidForm = false;
      }

      if (parseDate(expiryDate).toString() === 'Invalid Date') {
        expiryDateAlert.style.display = 'inline';
        expiryDateAlert.innerText = 'Expiry date is required';

        isValidForm = false;
      } else if (isPastDate(expiryDate)) {
        expiryDateAlert.style.display = 'inline';
        expiryDateAlert.innerText = 'Invalid expiry date';

        isValidForm = false;
      }

      if (isValidForm) {
        if (isAddCoupon) {
          fetch('/admin/add-coupon', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                couponName,
                discountAmount,
                minimumAmount,
                expiryDate
              })
            }).then(response => response.json())
            .then(data => {
              if (data.success) {
                window.location.reload();
              }

              if (data.error) {
                Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: data.error,
                  confirmButtonText: 'OK',
                  allowOutsideClick: false,
                  customClass: {
                    container: 'swal-css'
                  }
                });
              }
            }).catch(err => {
              console.log(err);
            })
        } else {
          fetch('/admin/edit-coupon', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                couponId,
                discountAmount,
                minimumAmount,
                expiryDate
              })
            }).then(response => response.json())
            .then(data => {
              if (data.success) {
                window.location.reload();
              }

              if (data.error) {
                Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: data.error,
                  confirmButtonText: 'OK',
                  allowOutsideClick: false,
                  customClass: {
                    container: 'swal-css'
                  }
                });
              }
            }).catch(err => {
              console.log(err);
            })
        }
      }
    });

    document.querySelector('body').addEventListener('click', function(event) {
      const statusButton = event.target.closest('.status-button');
      const deleteButton = event.target.closest('.delete-button');

      // using fetch for changing status of coupon
      if (statusButton) {
        const couponId = statusButton.getAttribute('data-coupon-id');

        fetch('/admin/toggle-coupon-status', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              couponId
            })
          }).then(response => response.json())
          .then(data => {
            if (data.success) {
              window.location.reload();
            }

            if (data.error) {
              Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.error,
                confirmButtonText: 'OK',
                allowOutsideClick: false,
                customClass: {
                  container: 'swal-css'
                }
              });
            }
          }).catch(err => {
            console.log(err);
          })
      }

      // using fetch for deleting coupon
      if (deleteButton) {
        const couponId = deleteButton.getAttribute('data-coupon-id');

        Swal.fire({
          title: "Are you sure?",
          icon: "question",
          showCancelButton: true,
          confirmButtonText: "Yes",
          allowOutsideClick: false,
          customClass: {
            container: 'swal-css'
          }
        }).then((result) => {
          if (result.isConfirmed) {
            fetch('/admin/delete-coupon', {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  couponId
                })
              }).then(response => response.json())
              .then(data => {
                if (data.success) {
                  window.location.reload();
                }

                if (data.error) {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.error,
                    confirmButtonText: 'OK',
                    allowOutsideClick: false,
                    customClass: {
                      container: 'swal-css'
                    }
                  });
                }
              }).catch(err => {
                console.log(err);
              })
          }
        })
      }
    })

    // for searching coupons
    const searchButton = document.getElementById('search-button');

    searchButton.addEventListener('click', function() {
      const searchTerm = document.getElementById('search-input').value;

      window.location.href = `/admin/coupons?searchTerm=${searchTerm}`;
    });
  });
</script>